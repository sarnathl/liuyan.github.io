<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2018%2F10%2F07%2Fcss-hemoxing01%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[css盒模型]]></title>
    <url>%2F2018%2F10%2F07%2Fhello-world.3%2F</url>
    <content type="text"><![CDATA[盒模型 #一.盒模型属性值的4种方式： 123451. 四个值：上、右、下、左 &#123;padding:10px 20px 30px 40px;&#125;2. 三个值：上、左右、下 &#123;padding:10px 20px 30px;&#125;3. 二个值：上下 左右 &#123;padding:10px 20px;&#125;4. 一个值：四个方向 &#123;padding:20px;&#125;5. 可单独设置一方向填充：比如 &#123;padding-top:20px;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657/* padding一个值 距离四个边的距离 */ .box5 &#123; width: 200px; height: 200px; background: #0ff; border: 2px #0f0 solid; padding: 50px; margin-bottom: 40px; &#125; /* padding 2个值 上下 左右的距离 */ .box6 &#123; width: 200px; height: 200px; background: #ffff00; border: 2px rgb(255, 0, 0) solid; padding: 10px 50px; margin-bottom: 20px; &#125; /* padding 3个值 上 左右 下的距离 */ .box7 &#123; width: 200px; height: 200px; background: #ff0aaf; border: 2px rgb(255, 0, 0) solid; padding: 50px 10px 10px; margin-bottom: 40px; &#125; /* padding 4个值的距离上 右 下 左 */ .box8 &#123; width: 200px; height: 200px; background: #0ff; border: 2px rgb(255, 0, 0) solid; padding: 50px 10px 10px 100px; &#125; &lt;div class="box5"&gt; 四条边的距离 四条边的距离 四条边的距离 四条边的距离 四条边的距离 四条边的距离 四条边的距离 四条边的距离 四条边的距离 四条边的距离 四条边的距离 四条边的距离 四条边的距离 四条边的距离 四条边的距离 四条边的距离 &lt;/div&gt; &lt;div class="box6"&gt; 上下左右的距离 上下左右的距离 上下左右的距离 上下左右的距离 上下左右的距离 上下左右的距离 上下左右的距离 上下左右的距离 上下左右的距离 上下左右的距离 上下左右的距离 上下左右的距离 上下左右的距离 上下左右的距离 上下左右的距离 &lt;/div&gt; &lt;div class="box7"&gt; 上下左右下的距离 上下左右下的距离 上下左右下的距离 上下左右下的距离 上下左右下的距离 上下左右下的距离 上下左右下的距离 上下左右下的距离 上下左右下的距离 上下左右下的距离 &lt;/div&gt; &lt;div class="box8"&gt; 上 右 下 左 上 右 下 左 上 右 下 左 上 右 下 左 上 右 下 左 上 右 下 左 上 右 下 左 上 右 下 左 上 右 下 左 上 右 下 左 &lt;/div&gt; 盒子与盒子之间用margin 盒子边缘与内部元素之间距离用padding12345678910111213/* text-align: center; 文字居中 line-height: 200px;文字在块里面居中 margin: 0 auto;让块居中*/ h1 &#123; width: 800px; height: 200px; background: #0ff; text-align: center; line-height: 200px; margin: 0 auto; &#125; 盒模型注意事项 1.系统会为某些元素默认设置margin值或者padding值，对我们的计算会有影响，所以在开发中都要清除控件自带的属性 12 /* 作用：有些控件自带margin属性，，方便我们测量 */*&#123;margin: 0;padding: 0&#125; 2.当父级元素和自己元素都设置margin时，子级的margin值会传递到父级。注意：只有 margin-top会这样，我们在父容器中不加 overflow: hidden;会显示这样 如图1，加了overflow: hidden;如图2图1的子容器并没有距离上边距20px 12345678910111213141516171819 .box3 &#123; overflow: hidden; width: 300px; height: 300px; background: #0ff; &#125; /* margin-top: 20px; 因为我是子元素，会传递给父元素，所以父元素跟着移动20px margin-top:;有这个问题如果让子元素距离父元素20px 就需要在父元素加overflow:hidden */ .box4 &#123; width: 50px; height: 50px; margin-top: 20px; background: #f0f; &#125;&lt;div class="box3"&gt; &lt;div class="box4"&gt;&lt;/div&gt;&lt;/div&gt; 图1图2 二.文本溢出 overflow属性：定义溢出元素内容区的内容会如何处理 12345语法：&#123;overflow:visible/hidden/scroll/auto/inherit;&#125;visiable:默认值，内容不会被修建，会出现在元素框之外；hidden:内容会被修剪，并且其余内容是不可见；scroll:内容会被修建，但是浏览器会显示滚动条，以便查看其它的内容；inherit:规定应该从父元素集成overflow属性的值； 1.文本溢出说明：要实现溢出时产生省略号的效果还需要定义： 12341.容器宽度：width2.强制文本在一行内显示：white-space：nowrap;3.溢出内容为隐藏：overflow:hidden;4.溢出文本显示省略号：text-overflow:ellipsis;]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序绑定数据]]></title>
    <url>%2F2018%2F09%2F13%2Fwx-bangding%2F</url>
    <content type="text"><![CDATA[一.绑定数据的几种用法首先在我们的xx.js页面模拟几条数据 12345678910111213141516171819202122232425262728data: &#123; // 控制显示是否隐藏 flag: false, //1. 普通数据 message:"普通的绑定数据", //2.1 创建个数组模拟网络数据 array: [&#123; message: 'hello' &#125;, &#123; message: 'world' &#125;, &#123; message: "!" &#125;], items: [ &#123; name: "苹果" &#125;, &#123; name: "香蕉" &#125;, &#123; name: "栗子" &#125;, &#123; name: "鸭梨" &#125;, &#123; name: "山大" &#125;, ], play:Math.floor(Math.random()*3+1), itemTempl:&#123; index:0, msg:"this is a template", time:"2018-09-13" &#125;&#125; 1.普通数据绑定，来看我们的xx.wxml12&lt;!--1.普通的数据绑定 --&gt;&lt;view&gt;&#123;&#123;message&#125;&#125;&lt;/view&gt; 2.绑定数据集 循环循环数组的名称，我们的数组上面定义叫array[{},{}]，所以在绑定数据的时候要用俩大括号来绑定数据。 1.用我们的block来包裹住2.给循环起个名字 叫item 注意：要用这个循环的名称“item”.属性名称，是message3.wx:key=”index” 必须是index 也可以是集合里的id,不加wx:key会有警告如下图 12345&lt;view&gt; &lt;block wx:for="&#123;&#123;array&#125;&#125;" wx:for-item="item" wx:key="index"&gt; &lt;view&gt;&#123;&#123;item.message&#125;&#125;&lt;/view&gt; &lt;/block&gt;&lt;/view&gt; 2.1来判断数据是显示还是隐藏，我们上面定义了flag:false 如果是true就隐藏否则显示hidden 和 if 都可以控制显示和隐藏那么我们什么时候用哪一种呢？区别：wx:if切换时会有界面一个局部渲染的过程，每次重新渲染(更多切换消耗)hidden 更多的是初始化渲染消耗 ，控制视图的显示隐藏(频繁切换用hidden) 123&lt;view hidden="&#123;&#123;flag ? true : false&#125;&#125;"&gt; Hidde是否显示或隐藏&lt;/view&gt; 3.通过模板template方式来绑定数据模板的好处： 引入我们自定义的模板，模板的好处，修改一处，调用的地方都会跟着改变，避免了wxml的臃肿问题，相当于android的include，声明一处，多地方调用，修改一处，调用者不用修改xx/xxtemplate.wxml先定义我们的模板，给模板起个名字123&lt;template name="fruit"&gt; &lt;view&gt;&#123;&#123;name&#125;&#125;&lt;/view&gt;&lt;/template&gt; 1231.引入我们的模板第一步在当前文件中引入&lt;import src="../你的模板目录/模板名字.wxml [别忘了.wxml]"&gt;2.wx:for="&#123;&#123;数据名称&#125;&#125;" ,我们在我们的data中定义了名称是items的数据源，wx:for-item="循环名称" 把这个名称传递给templeate模板 3.注意事项：不要忘记引入模板的后缀名.wxml 不要忘记闭合标签 123456&lt;import src="../xxmplate/xxtemplate.wxml"&gt;&lt;/import&gt;&lt;view&gt; &lt;block wx:for="&#123;&#123;items&#125;&#125;" wx:for-item="item" wx:key="index"&gt; &lt;template is="fruit" data="&#123;&#123;...item&#125;&#125;"&gt;&lt;/template&gt; &lt;/block&gt;&lt;/view&gt; 4.条件渲染1234567891011&lt;view&gt; &lt;view&gt;今天去哪里玩？&lt;/view&gt; &lt;view wx:if="&#123;&#123;play===1&#125;&#125;"&gt; 在家里玩 &lt;/view&gt; &lt;view wx:elif="&#123;&#123;play===2&#125;&#125;"&gt; 去海边玩 &lt;/view&gt; &lt;view wx:else&gt; 逛街 &lt;/view&gt;]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[推送显示未读数量]]></title>
    <url>%2F2018%2F09%2F12%2Fandroid-push-badge%2F</url>
    <content type="text"><![CDATA[在实际开发中会有这样还一个需求，显示推送过来的未读消息数量推送实时更新未读消息数量，接收到【一条消息】，就【显示未读数量】，当用户点击，或者拖拽的时候消除掉未读消息数量，先上一下效果图，当我推送两条消息过来的时候显示的样子 用到的技术 EventBus 响应式框架：以及显示消息的QBadgeView负责来显示目的：1.把接收到的消息从Receiver发送到主Activity，在主Activity中接收这个数量2.把接收到的数量用QBadgeView来显示 badgerView更多用法请参考 https://github.com/qstumn/BadgeView 第一步先引入我们的QBadgeView 库和EventBus库在我们的app-&gt;build.gradle中添加12compile 'q.rorbin:badgeview:1.1.3'compile 'org.greenrobot:eventbus:3.0.0' 第二步在我们接收自定义消息的地方添加 123456789101112131415161718192021222324252627282930313233343536public class MyReceiver extends BroadcastReceiver &#123; private static final String TAG = "JPush"; @Override public void onReceive(Context context, Intent intent) &#123; //当接受到消息, 弹出通知栏 Bundle bundle = intent.getExtras(); // 消息内容 String content = bundle.getString(JPushInterface.EXTRA_ALERT); if (JPushInterface.ACTION_MESSAGE_RECEIVED.equals(intent.getAction())) &#123; processCustomMessage(context, bundle); &#125; &#125;&#125; // 这里当我们APP端接收到推送过来的消息，我们就递增，并存起来 private void processCustomMessage(Context context, Bundle bundle) &#123; sendNotification(context,bundle); String msgText = bundle.getString(JPushInterface.EXTRA_MESSAGE); // 初始化一个存取未读消息的，默认存储是0 int pushcount = SharePreferenceUtils.getInt(context,"pushcount",0); pushcount++; // 当收到消息的时候在存 SharePreferenceUtils.setInt(context,"pushcount",pushcount); getMsgCount(context); &#125; // 拿到我们存的消息 private int getSendMessage(Context context) &#123; return SharePreferenceUtils.getInt(context,"pushcount",0); &#125; // 发送我们的消息给MainActivity private void getMsgCount(Context context) &#123; int msg = getSendMessage(context); MessageEventBean messageEvent = new MessageEventBean(msg); EventBus.getDefault().post(messageEvent); &#125; 接下来看看我们的MainActivity 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869public class MainActivity extends AppCompatActivity&#123; @InjectView(R.id.swicth_draggable) Switch swicth_draggable; private int msgCount; // 接收消息数量 private QBadgeView badgeView; private List&lt;Badge&gt; badges; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ButterKnife.inject(this); init(); &#125; // 初始化 注意看我的顺序，badges 要放在后面 private void init() &#123; EventBus.getDefault().register(this); CompoundButton.OnCheckedChangeListener onCheckedChangeListener = new CompoundButton.OnCheckedChangeListener() &#123; @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) &#123; for (Badge badge : badges) &#123; badge.setOnDragStateChangedListener(isChecked ? new Badge.OnDragStateChangedListener() &#123; @Override public void onDragStateChanged(int dragState, Badge badge, View targetView) &#123; SharePreferenceUtils.remove(MainActivity.this,"pushcount"); &#125; &#125; : null); &#125; &#125; &#125;; swicth_draggable.setOnCheckedChangeListener(onCheckedChangeListener); badges = new ArrayList&lt;&gt;(); badgeView = new QBadgeView(this); // 拿到我们存的数据 msgCount = SharePreferenceUtils.getInt(MainActivity.this,"pushcount",0); // 这里我们把显示未读数量提取出来放到一个方法里,这里是我们用户一进来主页面显示的未读消息数量 getBrageCountMsg(msgCount); &#125; // 未读数量 private void getBrageCountMsg(int msgCount) &#123; badgeView.setBadgeNumber(msgCount); badgeView.bindTarget(mTabtab4); badges.add(badgeView); swicth_draggable.setChecked(true); &#125; @Subscribe(threadMode = ThreadMode.MAIN) public void onMsgEvent(MessageEventBean messageEventBean)&#123; msgCount = messageEventBean.getMessage(); SharePreferenceUtils.setInt(MainActivity.this,"pushcount",msgCount); // 这里是我们推送数据过来实时显示的未读消息数量 getBrageCountMsg(msgCount); &#125; // 在我点击了位置服务的时候删除未读消息[在你想删除的地方调用该方法即可] private void removeBadge() &#123; for (Badge badge : badges) &#123; SharePreferenceUtils.remove(MainActivity.this,"pushcount"); badge.hide(true); &#125; &#125; // 别忘了解除绑定 @Override protected void onDestroy() &#123; super.onDestroy(); EventBus.getDefault().unregister(this); &#125;&#125;]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[百度地图debug release Key申请]]></title>
    <url>%2F2018%2F09%2F11%2Fandroid-baidusdk%2F</url>
    <content type="text"><![CDATA[百度SDK 申请1http://lbsyun.baidu.com/apiconsole/key/create 二.发布版 SHA1 debug 版本申请 打开终端输入cd .android keytool -list -v -keystore debug.keystore 密钥口令android SHA1 就是我们的开发板 也就是debug版本 三.开发版本 SHA1 release 版本申请 首先我们的应用是打包签名后的 ，用我们的jks再来一遍就生成了发布版的SHA1 打开终端输入cd .android keytool -list -v -keystore /你自己的releaseKey路径即可 生成了不一样的SHA1 SHA1 就是我们的发布版的SHA1 也就是release版本]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
</search>
